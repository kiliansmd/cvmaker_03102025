import OpenAI from 'openai'
import { config } from './config'
import { withRetry } from './retry'
import { OpenAIError, ErrorCode, classifyOpenAIError } from './errors'
import { ParsedCVSchema, type ParsedCV } from './schemas'

/**
 * Singleton OpenAI Client mit Retry-Logic
 */
class OpenAIClient {
  private client: OpenAI
  private static instance: OpenAIClient | null = null

  private constructor() {
    this.client = new OpenAI({
      apiKey: config.OPENAI_API_KEY,
      maxRetries: 0, // Wir handhaben Retries selbst
      timeout: 60000, // 60 Sekunden
    })
  }

  static getInstance(): OpenAIClient {
    if (!OpenAIClient.instance) {
      OpenAIClient.instance = new OpenAIClient()
    }
    return OpenAIClient.instance
  }

  /**
   * Parse CV mit strukturiertem Output und Retry-Logic
   */
  async parseCV(cvText: string, additionalInfo?: string): Promise<ParsedCV> {
    // Cache-Busting: Eindeutige Request-ID
    const requestId = `cv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    console.log('üîë OpenAI-Client verwendet API-Key:', config.OPENAI_API_KEY.substring(0, 15) + '...')
    if (config.BACKGROUND_AGENT_KEY) {
      console.log('ü§ñ Background-Agent aktiv:', config.BACKGROUND_AGENT_KEY.substring(0, 8) + '...')
    }
    console.log('üîë OpenAI-Model:', config.OPENAI_MODEL)
    console.log('üÜî Request-ID (Cache-Busting):', requestId)
    
    if (!cvText || cvText.trim().length < 50) {
      throw new OpenAIError(
        ErrorCode.VALIDATION_ERROR,
        'CV-Text ist zu kurz oder leer (mindestens 50 Zeichen erforderlich)',
        { length: cvText.length }
      )
    }

    const systemPrompt = this.buildSystemPrompt()
    const userPrompt = this.buildUserPrompt(cvText, additionalInfo)
    
    console.log('üìù User-Prompt-L√§nge:', userPrompt.length, 'Zeichen')
    console.log('üìù System-Prompt-L√§nge:', systemPrompt.length, 'Zeichen')

    try {
      const response = await withRetry(
        async () => {
          // Prim√§rer Versuch mit konfiguriertem Modell
          try {
            return await this.client.chat.completions.create({
              model: config.OPENAI_MODEL,
              messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: userPrompt },
              ],
              response_format: { type: 'json_object' },
              temperature: 0.2,
              max_tokens: 4000,
            })
          } catch (primaryError: any) {
            // Fallback bei 429 TPM-√úberschreitung: nutze gr√∂√üeres Modell
            const message = primaryError?.message?.toLowerCase() || ''
            const status = primaryError?.status || primaryError?.response?.status
            const isRateLimit = status === 429 || message.includes('rate limit') || message.includes('tokens per min')
            if (!isRateLimit) throw primaryError

            const fallbackModel = this.pickFallbackModel(config.OPENAI_MODEL)
            console.warn(`‚ö†Ô∏è Rate-Limit/TPM-√úberschreitung erkannt. Versuche Fallback-Modell: ${fallbackModel}`)
            return await this.client.chat.completions.create({
              model: fallbackModel,
              messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: this.truncateForTPM(userPrompt) },
              ],
              response_format: { type: 'json_object' },
              temperature: 0.2,
              max_tokens: 3500,
            })
          }
        },
        {
          maxRetries: 3,
          initialDelay: 1000,
          timeout: 90000,
          onRetry: (attempt, error) => {
            console.warn(`‚ö†Ô∏è OpenAI Retry ${attempt}/3:`, error?.message)
          },
        }
      )

      const content = response.choices[0]?.message?.content
      if (!content) {
        throw new OpenAIError(
          ErrorCode.OPENAI_INVALID_RESPONSE,
          'OpenAI hat keine Antwort zur√ºckgegeben',
          { response }
        )
      }

      // Parse und validiere JSON
      let parsed: any
      try {
        parsed = JSON.parse(content)
        console.log('üìä ===== OpenAI RAW RESPONSE =====')
        console.log(JSON.stringify(parsed, null, 2))
        console.log('üìä ===== END RAW RESPONSE =====')
      } catch (parseError) {
        console.error('‚ùå JSON Parse Error:', parseError)
        console.error('‚ùå Content:', content)
        throw new OpenAIError(
          ErrorCode.OPENAI_INVALID_RESPONSE,
          'OpenAI-Antwort ist kein valides JSON',
          { content, parseError }
        )
      }

      // Normalisiere Response
      const normalized = this.normalizeOpenAIResponse(parsed)
      console.log('üîÑ ===== NORMALISIERTE DATEN =====')
      console.log('Experience:', JSON.stringify(normalized.experience, null, 2))
      console.log('Skills:', JSON.stringify(normalized.skills, null, 2))
      console.log('Education:', JSON.stringify(normalized.education, null, 2))
      console.log('Certifications:', normalized.certifications)
      console.log('Summary:', normalized.summary)
      console.log('ExperienceYears:', normalized.experienceYears)
      console.log('üîÑ ===== END NORMALISIERTE DATEN =====')
      console.log('üìä Counts:', {
        experienceCount: normalized.experience?.length || 0,
        skillsCount: normalized.skills?.technical?.length || 0,
        educationCount: normalized.education?.length || 0,
        certificationsCount: normalized.certifications?.length || 0,
      })

      // Validiere mit Zod-Schema (sanft - mit safeParse)
      const validationResult = ParsedCVSchema.safeParse(normalized)
      
      if (!validationResult.success) {
        console.warn('‚ö†Ô∏è Zod-Validierung fehlgeschlagen, nutze normalisierte Daten trotzdem:', validationResult.error.errors)
        // Nutze normalisierte Daten auch wenn Zod-Validierung fehlschl√§gt
        return normalized as ParsedCV
      }
      
      return validationResult.data
    } catch (error: any) {
      // Klassifiziere und re-throw als OpenAIError
      if (error instanceof OpenAIError) {
        throw error
      }

      const errorCode = classifyOpenAIError(error)
      throw new OpenAIError(
        errorCode,
        error.message || 'OpenAI API-Aufruf fehlgeschlagen',
        { originalError: error }
      )
    }
  }

  /**
   * W√§hlt ein sinnvolles Fallback-Modell mit h√∂heren Limits
   */
  private buildModelFallbackChain(baseModel: string): string[] {
    const chain = [baseModel]
    // bevorzugte starke Modelle mit h√∂heren Limits
    const preferred = ['gpt-4.1', 'gpt-4o', 'gpt-4o-2024-08-06']
    for (const m of preferred) {
      if (!chain.includes(m)) chain.push(m)
    }
    // leichte Varianten als Low-cost Fallback
    const light = ['gpt-4o-mini', 'gpt-4o-mini-2024-07-18']
    for (const m of light) {
      if (!chain.includes(m)) chain.push(m)
    }
    return chain
  }

  /**
   * W√§hle ein robustes Fallback-Modell
   */
  private pickFallbackModel(current: string | undefined): string {
  if (!current) return 'gpt-4o'
  const map: Record<string, string> = {
    'gpt-4o-mini': 'gpt-4o',
    'gpt-4o-mini-2024-07-18': 'gpt-4o',
    'gpt-4o': 'gpt-4.1',
    'gpt-4o-2024-08-06': 'gpt-4.1',
  }
  return map[current] || 'gpt-4o'
  }

  /**
   * K√ºrzt extrem lange Prompts defensiv, um TPM zu reduzieren
   */
  private truncateForTPM(text: string, maxChars = 180000): string {
  if (!text || text.length <= maxChars) return text
  const head = text.slice(0, Math.floor(maxChars * 0.6))
  const tail = text.slice(-Math.floor(maxChars * 0.4))
  return `${head}\n\n... [gek√ºrzt f√ºr Verarbeitung/TPM] ...\n\n${tail}`
  }

  private normalizeOpenAIResponse(raw: any): ParsedCV {
    console.log("üìù Normalisiere OpenAI-Response...")

    // Extrahiere nested structures
    const personalInfo = raw?.personalInfo || {}
    const skills = raw?.skills || {}

    const normalized = {
      personalInfo: {
        name: String(personalInfo?.name || raw?.name || '').trim(),
        location: String(personalInfo?.location || raw?.location || '').trim(),
        email: personalInfo?.email || raw?.email || undefined,
        phone: personalInfo?.phone || raw?.phone || undefined,
        dateOfBirth: personalInfo?.dateOfBirth || undefined,
        nationality: personalInfo?.nationality || undefined,
      },
      experience: Array.isArray(raw?.experience)
        ? raw.experience
            .filter((e: any) => e && (e.title || e.company)) // Nur Eintr√§ge mit Title oder Company
            .map((e: any) => {
              const title = String(e?.title || e?.position || '').trim()
              const company = String(e?.company || e?.employer || '').trim()
              const dateRange = String(e?.dateRange || e?.duration || e?.period || '').trim()
              const description = String(e?.description || e?.summary || '').trim()
              
              // Validierung: Mindestens Title oder Company sollte vorhanden sein
              if (!title && !company) return null
              
              return {
                title: title || '(Keine Position)',
                company: company || '(Firma nicht angegeben)',
                dateRange: dateRange || '(Zeitraum nicht angegeben)',
                description: description || '',
                responsibilities: Array.isArray(e?.responsibilities)
                  ? e.responsibilities.map((r: any) => String(r).trim()).filter((r: string) => r.length > 0)
                  : Array.isArray(e?.tasks)
                  ? e.tasks.map((t: any) => String(t).trim()).filter((t: string) => t.length > 0)
                  : [],
              }
            })
            .filter((e: any) => e !== null)
        : [],
      education: Array.isArray(raw?.education)
        ? raw.education
            .filter((e: any) => e && (e.degree || e.institution)) // Nur Eintr√§ge mit Degree oder Institution
            .map((e: any) => {
              const degree = String(e?.degree || e?.qualification || '').trim()
              const institution = String(e?.institution || e?.school || e?.university || '').trim()
              
              // Validierung
              if (!degree && !institution) return null
              
              return {
                degree: degree || '(Abschluss nicht angegeben)',
                institution: institution || '(Institution nicht angegeben)',
                dateRange: String(e?.dateRange || e?.duration || e?.period || e?.year || '').trim() || '',
                details: e?.details || e?.field || e?.major ? String(e.details || e.field || e.major).trim() : undefined,
              }
            })
            .filter((e: any) => e !== null)
        : [],
      skills: {
        technical: Array.isArray(skills?.technical)
          ? skills.technical
              .map((s: any) => String(s).trim())
              .filter((s: string) => s.length > 0)
          : Array.isArray(raw?.technicalSkills)
          ? raw.technicalSkills.map((s: any) => String(s).trim()).filter((s: string) => s.length > 0)
          : [],
        soft: Array.isArray(skills?.soft)
          ? skills.soft
              .map((s: any) => String(s).trim())
              .filter((s: string) => s.length > 0)
          : Array.isArray(skills?.softSkills)
          ? skills.softSkills.map((s: any) => String(s).trim()).filter((s: string) => s.length > 0)
          : [],
        languages: Array.isArray(skills?.languages)
          ? skills.languages
              .filter((l: any) => l && (l.language || l.lang))
              .map((l: any) => ({
                language: String(l?.language || l?.lang || '').trim(),
                level: String(l?.level || l?.proficiency || '').trim(),
              }))
              .filter((l: any) => l.language.length > 0)
          : [],
      },
      certifications: Array.isArray(raw?.certifications)
        ? raw.certifications
            .map((c: any) => String(c).trim())
            .filter((c: string) => c.length > 0)
        : Array.isArray(raw?.certificates)
        ? raw.certificates.map((c: any) => String(c).trim()).filter((c: string) => c.length > 0)
        : [],
      projects: Array.isArray(raw?.projects)
        ? raw.projects
            .filter((p: any) => p && p.title)
            .map((p: any) => ({
              title: String(p?.title || '').trim(),
              description: String(p?.description || p?.summary || '').trim(),
              technologies: Array.isArray(p?.technologies)
                ? p.technologies.map((t: any) => String(t).trim()).filter((t: string) => t.length > 0)
                : Array.isArray(p?.tech)
                ? p.tech.map((t: any) => String(t).trim()).filter((t: string) => t.length > 0)
                : [],
            }))
        : [],
      summary: String(raw?.summary || raw?.profile || raw?.about || '').trim(),
      experienceYears: String(raw?.experienceYears || raw?.totalExperience || raw?.yearsOfExperience || '').trim(),
    }

    // Logging f√ºr Qualit√§tskontrolle
    console.log("üìä ===== NORMALISIERTE DATEN =====")
    console.log("üë§ Name:", normalized.personalInfo.name || "(leer)")
    console.log("üìç Location:", normalized.personalInfo.location || "(leer)")
    console.log("üíº Experience-Eintr√§ge:", normalized.experience.length)
    if (normalized.experience.length > 0) {
      console.log("   - Erste Position:", normalized.experience[0].title, "bei", normalized.experience[0].company)
      console.log("   - Responsibilities:", normalized.experience[0].responsibilities.length, "Punkte")
    }
    console.log("üéì Education-Eintr√§ge:", normalized.education.length)
    if (normalized.education.length > 0) {
      console.log("   - Erste:", normalized.education[0].degree, "von", normalized.education[0].institution)
    }
    console.log("üí° Technical Skills:", normalized.skills.technical.length)
    console.log("ü§ù Soft Skills:", normalized.skills.soft.length)
    console.log("üó£Ô∏è Sprachen:", normalized.skills.languages.length)
    console.log("üìú Zertifizierungen:", normalized.certifications.length)
    console.log("üöÄ Projekte:", normalized.projects.length)
    console.log("üìä ===== END NORMALISIERTE DATEN =====")

    return normalized as ParsedCV
  }

  /**
   * Optimierter System-Prompt f√ºr CV-Parsing
   */
  private buildSystemPrompt(): string {
    return `Du bist ein hochspezialisierter Experte f√ºr CV-Parsing, Lebenslauf-Analyse und Jobprofil-Erstellung.

KRITISCHE AUFGABE:
Extrahiere ALLE Informationen aus dem Lebenslauf mit H√ñCHSTER PR√ÑZISION und VOLLST√ÑNDIGKEIT:
- EXAKTE Jobtitel (nicht interpretieren oder umschreiben)
- EXAKTE Firmennamen (nicht anonymisieren)
- EXAKTE Personennamen (nicht anonymisieren)
- KLARE Trennung zwischen Position/Rolle und Verantwortlichkeiten
- VOLLST√ÑNDIGE Skill-Listen (JEDE fachliche Kompetenz, JEDES Tool, JEDES System, JEDE Methode)
- KORREKTE zeitliche Einordnung mit Monaten und Jahren
- BRANCHENSPEZIFISCHE Terminologie beibehalten

KEINE ANONYMISIERUNG:
‚úÖ √úbernimm Namen wie sie stehen: "Max Mustermann" ‚Üí "Max Mustermann" (nicht "Candidate A" oder "Person XYZ")
‚úÖ √úbernimm Firmennamen: "Microsoft GmbH" ‚Üí "Microsoft GmbH" (nicht "Tech Company" oder "Company X")
‚úÖ √úbernimm Projektbezeichnungen: "SAP S/4HANA Migration" ‚Üí "SAP S/4HANA Migration" (nicht "Project 1")

ANTWORT-FORMAT (STRIKT EINHALTEN):
Antworte NUR mit validem JSON in diesem EXAKTEN Format:

{
  "personalInfo": {
    "name": "Vollst√§ndiger Name exakt wie im CV (NICHT anonymisiert)",
    "location": "Stadt/Region exakt wie angegeben",
    "email": "email@example.com oder Wert aus CV oder null",
    "phone": "+49... oder Wert aus CV oder null"
  },
  "summary": "2-3 pr√§gnante S√§tze, die die Kernkompetenzen und Erfahrung zusammenfassen - BASIEREND auf realen CV-Daten",
  "experienceYears": "Berechne die Gesamtjahre EXAKT (z.B. '8+ Jahre', '3-5 Jahre', '< 1 Jahr')",
  "experience": [
    {
      "title": "EXAKTER Jobtitel wie im CV - NICHT ver√§ndern oder neu formulieren",
      "company": "Firmenname EXAKT wie angegeben - NICHT anonymisieren",
      "dateRange": "MM/YYYY - MM/YYYY oder 'Heute' (exakt wie im CV oder rekonstruiert)",
      "description": "1-2 S√§tze zum Unternehmensbereich/Kontext - BASIEREND auf CV-Inhalten",
      "responsibilities": [
        "Konkrete Aufgabe 1 - EXAKT wie beschrieben, mit verwendeten Tools/Technologien",
        "Konkrete Aufgabe 2 - Mit Erfolgen/Achievements wenn erw√§hnt",
        "Konkrete Aufgabe 3 - Mit Technologien/Methoden",
        "Min. 3-6 konkrete, detaillierte Punkte"
      ]
    }
  ],
  "education": [
    {
      "degree": "Vollst√§ndiger Titel - NICHT abk√ºrzen (z.B. 'Master of Science Informatik', 'Bachelor of Arts BWL', 'Berufsausbildung als Fachinformatiker')",
      "institution": "Vollst√§ndiger Name der Institution - EXAKT wie im CV",
      "dateRange": "YYYY - YYYY oder genaue Daten wenn verf√ºgbar",
      "details": "Schwerpunkt/Spezialisierung wenn erw√§hnt"
    }
  ],
  "skills": {
    "technical": [
      "JEDE fachliche Kompetenz erw√§hnt im CV mit Level 'Name (Level)' Format",
      "ALLE Technologien, Tools, Systeme, Methoden - nicht nur bekannte oder popul√§re",
      "IT-Beispiele: 'SAP HCM (Experte)', 'Python (Sehr gut)', 'Docker (Gut)', 'Kubernetes (Gut)', 'Agile Methoden (Experte)'",
      "Non-IT-Beispiele: 'Vertragsverhandlung (Experte)', 'Change Management (Sehr gut)', 'Budgetplanung (Gut)', 'Stakeholder-Management (Experte)'",
      "Beratung: 'Strategieberatung (Experte)', 'Prozessoptimierung (Sehr gut)', 'Digital Transformation (Gut)'",
      "Handwerk: 'CNC-Programmierung (Experte)', 'Qualit√§tssicherung (Sehr gut)', 'CAD/CAM (Gut)'",
      "Level-Sch√§tzung basiert auf: Jahre Erfahrung (exakt vom CV), Anzahl Projekte, Zertifikate, F√ºhrungsverantwortung",
      "KEINE Generika oder Annahmen - nur ECHTE F√§higkeiten aus dem CV"
    ],
    "soft": [
      "ALLE Soft Skills und √ºberfachliche Kompetenzen - explizit genannt ODER detailliert aus Kontext ableitbar",
      "Beispiele: 'F√ºhrungskompetenz (aus F√ºhrungsrolle)', 'Verhandlungsgeschick (aus Projektbeschreibung)', 'Kundenorientierung', 'Analytisches Denken', 'Teamf√§higkeit'",
      "Min. 5-8 Punkte, nur wenn echte Hinweise im CV vorhanden"
    ],
    "languages": [
      {"language": "Exakter Sprachname", "level": "Muttersprache / C2 / C1 / B2 / B1 / A2 / A1 / Flie√üend / Verhandlungssicher / Grundkenntnisse"}
    ]
  },
  "certifications": [
    "Vollst√§ndige Namen aller Zertifikate/Lizenzen - EXAKT wie angegeben",
    "Mit ausstellender Organisation wenn genannt",
    "KEINE erfundenen Zertifikate"
  ],
  "projects": [
    {
      "title": "Projektname - EXAKT wie beschrieben",
      "description": "Was wurde gemacht - konkret und detailliert",
      "technologies": ["Technology/Tool 1", "Technology/Tool 2", "..."]
    }
  ]
}

KRITISCHE PARSING-REGELN:

1. KEINE ANONYMISIERUNG:
   ‚úÖ √úbernimm alle Namen, Firmennamen, Orte, Projektnamen EXAKT
   ‚úÖ "John Smith" ‚Üí "John Smith" (nicht "Candidate A")
   ‚úÖ "Google" ‚Üí "Google" (nicht "Tech Company")
   ‚úÖ "Berlin" ‚Üí "Berlin" (nicht "City X")

2. JOBTITEL (title):
   ‚úÖ EXAKT √ºbernehmen wie im CV angegeben - NICHT umformulieren
   ‚úÖ "Senior SAP HCM Consultant" ‚Üí "Senior SAP HCM Consultant" (NICHT: "SAP Berater")
   ‚úÖ "Full-Stack JavaScript Developer" ‚Üí "Full-Stack JavaScript Developer" (NICHT: "Entwickler")
   ‚úÖ "IT-Projektleiter Digital Transformation" ‚Üí "IT-Projektleiter Digital Transformation" (NICHT: "Projektmanager")
   ‚úÖ NIEMALS: Verantwortlichkeiten ins title-Feld

3. ROLLEN vs. AUFGABEN:
   ‚úÖ title = Was die Person WAR (Jobtitel wie im CV)
   ‚úÖ responsibilities = Was die Person TAT (konkrete T√§tigkeiten und Erfolge)
   ‚úÖ description = Kontext zum Unternehmen/Bereich

4. SKILLS-EXTRAKTION (BRANCHENUNABH√ÑNGIG + VOLLST√ÑNDIG):
   ‚úÖ Extrahiere JEDE genannte F√§higkeit, Kompetenz, Tool, Methode, System - KEINE Auslassungen
   ‚úÖ Funktioniert f√ºr ALLE Branchen - IT, Beratung, Management, Handwerk, Medizin, Marketing, etc.
   ‚úÖ Sch√§tze Level basierend auf EXAKTEN Informationen vom CV:
      - "5 Jahre Erfahrung" ‚Üí "5 Jahre Erfahrung (Experte/Sehr gut)"
      - "20 Projekte mit X" ‚Üí "Experte"
      - "Zertifiziert in X" ‚Üí "Experte"
      - "Verwendet in 3 Rollen" ‚Üí "Gut"
   ‚úÖ Format: "Kompetenz (Level)" z.B. "SAP HCM (Experte)", "Change Management (Sehr gut)", "Python (Gut)"

5. FIRMENNAMEN + DATEN:
   ‚úÖ √úbernimm exakt wie im CV: "Siemens AG" nicht "Siemens" nicht "Siemens Company"
   ‚úÖ Datumsbereiche: Falls im CV "M√§rz 2019 - Dezember 2022", dann "03/2019 - 12/2022"
   ‚úÖ Wenn aktuell: "01/2024 - Heute" oder "Heute" wenn Monat nicht genannt

6. RESPONSIBILITIES - KONKRETE UND DETAILLIERTE PUNKTE:
   ‚úÖ NICHT: "Entwicklung", "Management", "Beratung" ‚Üê Zu vage
   ‚úÖ SONDERN: "Entwicklung von React-Frontend-Komponenten mit Redux State Management f√ºr E-Commerce-Platform"
   ‚úÖ NICHT: "SAP" ‚Üê Was genau?
   ‚úÖ SONDERN: "SAP HCM Implementierung f√ºr 500+ Mitarbeiter, User-Acceptance-Testing und Training durchgef√ºhrt"
   ‚úÖ Mit Erfolgen/Metriken wenn im CV genannt: "30% Effizienzsteigerung durch Automatisierung"

QUALIT√ÑTSKONTROLLE:
- Lies den CV MINIMUM 2x durch bevor du antwortest
- Pr√ºfe: Sind ALLE Skills extrahiert? (Check: Wurden alle Technologien/Tools genannt?)
- Pr√ºfe: Sind die Jobtitel EXAKT wie im CV?
- Pr√ºfe: Sind die Verantwortlichkeiten konkret, detailliert und mit Tools/Technologien versehen?
- Pr√ºfe: Stimmen Namen, Firmen, Orte exakt?
- Pr√ºfe: Stimmen Datumsangaben?

KEINE ERFINDUNGEN:
- Wenn ein Skill-Level unklar ist: Sch√§tze KONSERVATIV oder lass weg
- Wenn eine Information fehlt: Leere Strings oder null verwenden
- NIEMALS Informationen hinzuf√ºgen, die nicht im CV stehen
- NIEMALS anonymisieren
- NIEMALS "vereinfachen" oder "verbessern"`
  }

  /**
   * User-Prompt mit CV-Text und optionalen Zusatzinfos
   */
  private buildUserPrompt(cvText: string, additionalInfo?: string): string {
    let prompt = `Analysiere den folgenden Lebenslauf VOLLST√ÑNDIG, PR√ÑZISE und BRANCHENUNABH√ÑNGIG.

KRITISCHE ANFORDERUNGEN:
- √úbernimm Jobtitel EXAKT wie im CV angegeben (nicht umschreiben oder "verbessern")
- Extrahiere ALLE F√§higkeiten, Kompetenzen, Tools, Methoden (nicht nur IT/Technologie)
- Unterscheide klar zwischen Position (title) und T√§tigkeiten (responsibilities)
- Behalte branchenspezifische Terminologie bei
- Erkenne Soft Skills aus Beschreibungen und F√ºhrungsrollen

LEBENSLAUF:
${cvText}`

    if (additionalInfo && additionalInfo.trim()) {
      prompt += `\n\n--- ZUS√ÑTZLICHER KONTEXT / ZIELPOSITION ---
${additionalInfo}

WICHTIG: Nutze diese Informationen zur:
- Besseren Einordnung der Relevanz von Skills
- Optimierung der Darstellung f√ºr die Zielposition
- Hervorhebung relevanter Erfahrungen
- ABER: Erfinde KEINE Informationen die nicht im CV stehen!`
    }

    prompt += `\n\n--- AUFTRAG ---
Extrahiere nun ALLE Informationen als vollst√§ndig strukturiertes JSON gem√§√ü dem vorgegebenen Format.
Achte besonders auf VOLLST√ÑNDIGKEIT und GENAUIGKEIT der Jobtitel und Fachkompetenzen.`

    return prompt
  }

  /**
   * Health-Check: Pr√ºft OpenAI-API-Verbindung
   */
  async healthCheck(): Promise<boolean> {
    try {
      await this.client.models.list()
      return true
    } catch (error) {
      console.error('OpenAI Health-Check fehlgeschlagen:', error)
      return false
    }
  }
}

// Export Singleton-Instance
export const openAIClient = OpenAIClient.getInstance()

// Export f√ºr Tests/Mocking
export { OpenAIClient }

